#!/usr/bin/ruby

require 'sequel'
require 'rubygems'
require 'rjb'

require "#{File.dirname(__FILE__)}/timeutil.rb"

#-------------------------------------------------------------------------------
# GLOBAL VARIABLES
#-------------------------------------------------------------------------------
#--DB Vars
DB = Sequel.connect('postgres://localhost/data?user=research&password=what?why42?')
#--Testing Range
START = 0 #151
STOP  = 187
#--Java
ENV['JAVA_HOME'] = ENV['JDK_HOME']
Rjb::load(classpath = "#{ENV["JAVANLP_HOME"]}/projects/core/classes", 
	['-Xmx500m'])
Runtime = Rjb::import('java.lang.Runtime')
MaxentTagger = Rjb::import('edu.stanford.nlp.tagger.maxent.MaxentTagger')
Word = Rjb::import('edu.stanford.nlp.ling.Word')
ArrayList = Rjb::import('java.util.ArrayList')
TAGGER = MaxentTagger.new(
	'/home/gabor/lib/data/bidirectional-distsim-wsj-0-18.tagger')
#--GUTime
TMP_XML='/tmp/time.xml'
GUTIME_DIR="/home/gabor/bin/etc/"
TIMETAG="/home/gabor/bin/etc/TimeTag.pl"

#-------------------------------------------------------------------------------
# GUTIME
#-------------------------------------------------------------------------------
def gutime(words,tags,grounding)
	# -- Time Tag
	File.open(TMP_XML, 'w'){ |xml|
		xml.write("<DOC>\n")
		xml.write("\t<date>#{grounding}</date>\n")
		xml.write("\t<text>\n")
		xml.write("\t\t<s>")
		(0...words.length).each{ |i|
			word = words[i]
			tag = tags[i]
			xml.write("#{(i > 0) ? " " : ""}<lex pos=#{p}>#{word}</lex>")
		}
		xml.write(" </s>\n")
		xml.write("\t</text>\n")
		xml.write("</DOC>")
	}
	# -- Call GUTIME
	#(call perl)
	output = `perl -I#{GUTIME_DIR} #{TIMETAG} #{TMP_XML}`
	#(parse output)
	val = nil
	output.scan(/<TIMEX3 tid="(\w+)" TYPE="(\w+)" (ALT_)?VAL="([^"]+)">([^<]+)<\/TIMEX3>/).each do |matches|
		val = matches[3]
#		#(variables)
#		tid = matches[0]
#		type = matches[1]
#		dates = str2dates(matches[3])
#		str = matches[4]
#		#(display calendar)
#		puts calendar(dates[0], dates.length > 1 ? dates[1] : dates[0])
#		#(display)
#		puts "#{dates[0]}#{dates.length > 1 ? " - #{dates[1]}" : ""}: '#{str}'"
#		puts ""
	end
	if not val and output.match /TIMEX3/ then
		:MATCH
	elsif val
		parse(val,grounding)
	else
		nil
	end
end

#-------------------------------------------------------------------------------
# DIGEST
#-------------------------------------------------------------------------------
matched = 0
parsed = 0
tried = 0
total = 0
DB[:timebank_timex].each{ |timex|
	#--Get Value
	sid = timex[:sid]
	value = parseStr(timex[:value])
	#--Get Sent
	words = []
	tags = []
	DB[:timebank_doc].join(
			:timebank_sent, :timebank_doc__fid=>:timebank_sent__fid).join(
			:timebank_tag, :timebank_tag__sid=>:timebank_sent__sid).filter(
				{:timebank_tag__sid => sid} &
				(:timebank_tag__wid.cast(Integer) > timex[:scope_begin]) &
				(:timebank_tag__wid.cast(Integer) <= timex[:scope_end])
			).each{ |tag|
		if(tag[:key] == 'form') then
			words[tag[:wid]-timex[:scope_begin]] = tag[:value]
		elsif(tag[:key] == 'pos') then
			tags[tag[:wid]-timex[:scope_begin]] = tag[:value]
		end
	}
	puts "[#{timex[:tid]}] #{words.join(" ")}: [#{value.join(", ")}]"
	#--Get Grounding
	grounding = DB[:timebank_doc].join(
		:timebank_sent, :timebank_sent__fid=>:timebank_doc__fid).filter(
		{:timebank_sent__sid => timex[:sid]}
		).first[:pub_time]
	grounding = grounding.is_a?(DateTime) ? grounding : DateTime.parse(grounding)
	#--GUTime
	parse = gutime(words,tags,grounding)
	#--Score
	good = (parse and parse != :MATCH) ? sameTime(parse, value, grounding) : false
	matched += 1 if good
	parsed += 1 if parse
	tried += 1 if parse and parse != :MATCH
	total += 1
	puts "   #{
			good ? "âˆš " : "x "
		}#{
			parse ? (parse==:MATCH ? parse : parse.join(" ")) : nil
		}"
}

puts ""
puts "-----------------------------------------------------"
puts "ACCURACY OF ALL   #{matched.to_f/total.to_f}"
puts "ACCURACY OF TRIED #{matched.to_f/tried.to_f}"
puts "PARSED            #{parsed.to_f/total.to_f}"
puts "CORRECT           #{matched}"
puts "TOTAL             #{total} (#{parsed} parsed; #{tried} tried)"
puts "-----------------------------------------------------"
puts ""






