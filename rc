#!/bin/bash

#-----
# Evaluate
#-----
function score {
	# -- Variables
	last=`ls out | sort -nr | head -n 1`
	if [ "$1" != "" ]; then
		last="$1.exec"
	fi
	attr_len=`wc out/$last/attributes-train.tab | awk '{ print $1 }'`
	ext_len=`wc out/$last/extents-train.tab | awk '{ print $1 }'`
	# -- Scoring Script
	if [ "$2" == "trim" ]; then
		head -$attr_len aux/tempeval2/training/english/data/timex-attributes.tab > /tmp/attr.tab
		head -$ext_len aux/tempeval2/training/english/data/timex-extents.tab > /tmp/ext.tab
		python aux/tempeval2/scorer/score_entities.py\
			aux/tempeval2/training/english/data/base-segmentation.tab\
			/tmp/attr.tab\
			out/$last/attributes-train.tab\
			/tmp/ext.tab\
			out/$last/extents-train.tab
	else
		python aux/tempeval2/scorer/score_entities.py\
			aux/tempeval2/training/english/data/base-segmentation.tab\
			aux/tempeval2/training/english/data/timex-attributes.tab\
			out/$last/attributes-train.tab\
			aux/tempeval2/training/english/data/timex-extents.tab\
			out/$last/extents-train.tab
	fi
	# -- Match
	goldVals=`mktemp`
	guessVals=`mktemp`
	cat aux/tempeval2/training/english/data/timex-attributes.tab | grep "value"\
		> $goldVals
	cat out/$last/attributes-train.tab | grep "value"\
		> $guessVals
	total=`cat $guessVals | wc | awk '{ print $1 }'`
	missed=`diff $guessVals $goldVals | grep '^<' | wc | awk '{ print $1 }'`
	correct=`calc $total-$missed | awk '{ print $1 }'`
	echo ""
	echo "---Accuracy---"
	echo "Correct:  $correct"
	echo "Missed:   $missed"
	echo "Total:    $total"
	echo ""
	echo "Accuracy: `calc $correct / $total | awk '{ print $1 }'`"
}

function pyerr {
	# -- Variables
	last=`ls out | sort -nr | head -n 1`
	if [ "$1" != "" ]; then
		last="$1.exec"
	fi
	goldVals=`mktemp`
	guessVals=`mktemp`
	# -- Display
	cat aux/tempeval2/training/english/data/timex-attributes.tab | grep "value" |\
		awk '{ print NR ". " $7 "  " $8 }' > $goldVals
	cat out/$last/attributes-train.tab | grep "value" |\
		awk '{ print NR ". " $7 "  " $8 }' > $guessVals
	gvimdiff $guessVals $goldVals
}

#-----
# Manage Runs
#-----
function v {
	file=$1
	last=`ls out | sort -nr | head -n 1`
	vim out/$last/$file
}

function p() {
	last=`ls out | sort -nr | head -n 1`
	if [ "$1" != "" ]; then
		last="$1.exec"
	fi
	cd out/$last && ruby parses.rb && evince present.pdf; cd -
}

function present() {
	last=`ls out | sort -nr | head -n 1`
	if [ "$1" -a "$2" ]; then
		cd out/$last/iteration$1/ && ruby datum$2.rb && evince present.pdf; cd -
	else 
		cd out/$last && ruby parses.rb && evince present.pdf; cd -
	fi
}

function plot() {
	last=`ls out | sort -nr | head -n 1`
	if [ "$1" ]; then
		last="$1.exec"
	fi
	cat out/$last/log | grep 'Score: accuracy:' | sed -r -e 's/\s+Score: accuracy: ([01]\.[0-9]{3}); average pos: [0-9\.]+ \(in (1?)([0-9]{2})\.([0-9])%\).*/\1 \2.\3\4/g' | nl > /tmp/data
	echo "#!/usr/bin/gnuplot" > /tmp/data.plot
	if [ "$2" ]; then
		echo "set terminal png
set output '$2'" >> /tmp/data.plot
	fi
	echo "set title \"EM Training Summary\"
set xlabel \"Iteration\"
set ylabel \"Accuracy\"
set yr [0.0:1.0]
plot \"/tmp/data\" using 1:2 title 'Training' with linespoints, \\
  \"/tmp/data\" using 1:3 title 'In Beam' with lines" >> /tmp/data.plot
	if [ "$2" ]; then
		echo "Plotting..."
	else
		echo "pause -1 \"Hit enter to continue...\"" >> /tmp/data.plot
	fi
	gnuplot /tmp/data.plot
}

#-----
# Utilities
#-----
function make {
	/usr/bin/make $@ 2>&1 | color -r -cyan:red:yellow '([^ /]+.scala):([0-9]+): (error:.*)' -red -fatal '([a-z]+|[0-9]+) errors? found' || return 1
}
function r {
	make $@ && ./run
}
function cmd {
	java -cp bin:etc/joda-time.jar:etc/scala-compiler.jar:etc/scala-library.jar:etc/jline.jar:etc/lib.jar time.Time
}
